package main

/*
Go 结构体和结构体指针调用有什么区别
*/
type MyStruct struct {
	Name string
}

func (s MyStruct) SetName1(name string) {
	s.Name = name
}

func (s *MyStruct) SetName2(name string) {
	s.Name = name
}

/*
因此结构体方法是要将接收器定义成值，还是指针。这本质上与函数参数应该是值还是指针是同一个问题。

如何选择
整体有以下几个考虑因素，按重要程度顺序排列：

在使用上的考虑：方法是否需要修改接收器？如果需要，接收器必须是一个指针。

在效率上的考虑：如果接收器很大，比如：一个大的结构体，使用指针接收器会好很多。

在一致性上的考虑：如果类型的某些方法必须有指针接收器，那么其余的方法也应该有指针接收器，所以无论类型如何使用，方法集都是一致的。



回到上面的例子中，从功能使用角度来看：

如果 SetName2 方法修改了 s 的字段，调用者是可以看到这些字段值变更的，因为其是指针引用，本质上是同一份。
相对 SetName1 方法来讲，该方法是用调用者参数的副本来调用的，本质上是值传递，它所做的任何字段变更对调用者来说是看不见的。
另外对于基本类型、切片和小结构等类型，值接收器是非常廉价的。

因此除非方法的语义需要指针，那么值接收器是最高效和清晰的。在 GC 方面，也不需要过度关注。出现时再解决就好了。

*/

func main() {

}
